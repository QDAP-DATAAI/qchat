"use client";

import React, { FC, useState } from "react";
import { useChatContext } from "@/features/chat/chat-ui/chat-context";
import { ChatRole } from "@/features/chat/chat-services/models";
import { CreateUserFeedbackChatId } from "@/features/chat/chat-services/chat-service";
import Typography from "../typography";
import Modal from "../ui/modal";
import { Markdown } from "../markdown/markdown";
import AssistantButtons from "../ui/assistant-buttons";

interface ChatRowProps {
  chatMessageId: string;
  name: string;
  profilePicture: string;
  message: string;
  type: ChatRole;
}

export const ChatRow: FC<ChatRowProps> = (props) => {
  const [isIconChecked, setIsIconChecked] = useState(false);
  const [thumbsUpClicked, setThumbsUpClicked] = useState(false);
  const [thumbsDownClicked, setThumbsDownClicked] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const { isModalOpen, openModal, closeModal } = useChatContext();

  const toggleButton = (buttonId: string) => {
    switch (buttonId) {
      case 'ThumbsUp':
        setThumbsUpClicked(prevState => !prevState);
        setThumbsDownClicked(false);
        setIsIconChecked(false);
        CreateUserFeedbackChatId(props.chatMessageId, '', 'positive', '');
        break;
      case 'ThumbsDown':
        setThumbsDownClicked(prevState => !prevState);
        setThumbsUpClicked(false);
        setIsIconChecked(false);
        break;
      case 'CopyButton':
        setIsIconChecked(prevState => !prevState);
        setThumbsUpClicked(false);
        setThumbsDownClicked(false);
        break;
      default:
        break;
    }
  };

  const handleCopyButton = () => {
    toggleButton('CopyButton');
    const messageWithAttribution = props.message + "\n\nText generated by QChat";
    navigator.clipboard.writeText(messageWithAttribution).then(() => {
      setFeedbackMessage('Message copied to clipboard.');
      setTimeout(() => setFeedbackMessage(''), 2000);
    });
  };

  const handleThumbsUpClick = () => {
    toggleButton('ThumbsUp');
    setFeedbackMessage('Positive feedback submitted.');
    setTimeout(() => setFeedbackMessage(''), 2000);
  };
  
  const handleThumbsDownClick = () => {
    toggleButton('ThumbsDown');
    if (openModal) {
      openModal();
    }
  };

  async function handleModalSubmit(feedback: string, sentiment: string, reason: string): Promise<void> {
    if (sentiment === 'negative') {
      setFeedbackMessage('Negative feedback submitted.');
      setTimeout(() => setFeedbackMessage(''), 2000);
    }
  };

  const handleModalClose = () => {
    if (closeModal) {
      closeModal();
    }
  };

  return (
    <article className="container mx-auto py-1 flex flex-col pb-4">
      <section className="bg-background rounded-md flex-col overflow-hidden p-4 gap-4">
        <header className="flex justify-between items-center w-full">
          <Typography variant="h3" className="capitalize flex-1 text-heading" tabIndex={0}>
            {props.name}
          </Typography>
          <Modal
            chatThreadId={props.chatMessageId}
            open={isModalOpen || false}
            onClose={handleModalClose} 
            onSubmit={handleModalSubmit}
          />
        </header>
        <div className="prose prose-slate dark:prose-invert break-words prose-p:leading-relaxed prose-pre:p-0 max-w-none text-text text-sm md:text-md md:text-base" tabIndex={0}>
          <Markdown content={props.message} />
        </div>
        <div className="sr-only" aria-live="assertive">
          {feedbackMessage}
        </div>
        {props.type === "assistant" && (
          <AssistantButtons
            isIconChecked={isIconChecked}
            thumbsUpClicked={thumbsUpClicked}
            thumbsDownClicked={thumbsDownClicked}
            handleCopyButton={handleCopyButton}
            handleThumbsUpClick={handleThumbsUpClick}
            handleThumbsDownClick={handleThumbsDownClick}
          />
        )}
      </section>
    </article>
  );
};

export default ChatRow;