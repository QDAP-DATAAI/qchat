"use client";
import { ChatRole } from "@/features/chat/chat-services/models";
import { isNotNullOrEmpty } from "@/features/chat/chat-services/utils";
import { cn } from "@/lib/utils";
import { CheckIcon, ClipboardIcon, UserCircle, ThumbsUp, ThumbsDown } from "lucide-react";
import { FC, useState } from "react";
import { Markdown } from "../markdown/markdown";
import Typography from "../typography";
import { Button } from "../ui/button";
import Modal from "../ui/modal";
import { CreateUserFeedbackChatId } from "@/features/chat/chat-services/chat-service";

interface ChatRowProps {
  chatMessageId: string;
  name: string;
  profilePicture: string;
  message: string;
  type: ChatRole;
}

export const ChatRow: FC<ChatRowProps> = (props) => {
  const [isIconChecked, setIsIconChecked] = useState(false);
  const [thumbsUpClicked, setThumbsUpClicked] = useState(false);
  const [thumbsDownClicked, setThumbsDownClicked] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [reason, setReason] = useState('');

  const toggleButton = (buttonId: string) => {
    switch (buttonId) {
      case 'ThumbsUp':
        setThumbsUpClicked(prevState => !prevState);
        setThumbsDownClicked(false);
        setIsIconChecked(false);
        CreateUserFeedbackChatId(props.chatMessageId, '', 'positive', '');
        break;
      case 'ThumbsDown':
        setThumbsDownClicked(prevState => !prevState);
        setThumbsUpClicked(false);
        setIsIconChecked(false);
        break;
      case 'CopyButton':
        setIsIconChecked(prevState => !prevState);
        setThumbsUpClicked(false);
        setThumbsDownClicked(false);
        break;
      default:
        break;
    }
  };

  const handleCopyButton = () => {
    toggleButton('CopyButton');
    const messageWithAttribution = props.message + "\n\nText generated by QChat";
    navigator.clipboard.writeText(messageWithAttribution);
  };

  async function handleModalSubmit(feedback: string, sentiment: string, reason: string): Promise<void> {
    setFeedback(feedback);
    setReason(reason);
    setIsModalOpen(false);
    CreateUserFeedbackChatId(props.chatMessageId, feedback, 'negative', reason);

  };


  const openModal = () => {
    toggleButton('thumbsDown');
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  const handleThumbsUpClick = () => {
    toggleButton('ThumbsUp');
  };

  const handleThumbsDownClick = () => {
    toggleButton('ThumbsDown');
  };

  return (
    <div
      className={cn(
        "container mx-auto py-1 flex flex-col items-start"
      )}
    >
      <div
        className={cn(
          "flex flex-col overflow-hidden p-1 gap-4"
        )}
      >
        <div className="flex justify-between items-center w-full">
          <Typography variant="h4" className="capitalize flex-1 text-primary">
            {props.name}
          </Typography>


          
          <Modal chatThreadId={props.chatMessageId}
            open={isModalOpen}
            onClose={closeModal}
            onSubmit={(chatMessageId, feedback, reason) => {
              handleModalSubmit(feedback, 'negative', reason);
            }}
          />
        </div>
        <div
          className={cn(
            "prose prose-slate dark:prose-invert break-words prose-p:leading-relaxed prose-pre:p-0 max-w-none bg-card"
          )}
        >
          <Markdown content={props.message} />
        </div>
      {props.type === "assistant" && (
        <div className="flex items-left w-full">
          <Button
            variant={"ghost"}
            size={"sm"}
            title="Copy text"
            onClick={handleCopyButton}
          >
            {isIconChecked ? (
              <CheckIcon size={14} />
            ) : (
              <ClipboardIcon size={14} />
            )}
          </Button>

          <Button
            variant={"ghost"}
            size={"sm"}
            title="Thumbs up"
            className="justify-right flex"
            onClick={handleThumbsUpClick}
          >
            {thumbsUpClicked ? (
              <CheckIcon size={14} />
            ) : (
              <ThumbsUp size={14} />
            )}
          </Button>
          <Button
            variant={"ghost"}
            size={"sm"}
            title="Thumbs down"
            className="justify-right flex"
            onClick={openModal}
          >
            {thumbsDownClicked ? (
              <CheckIcon size={14} />
            ) : (
              <ThumbsDown size={14} />
            )}
          </Button>

          <Modal 
            chatThreadId={props.chatMessageId}
            open={isModalOpen}
            onClose={closeModal}
            onSubmit={(chatMessageId: string, feedback: string, reason: string): void => {
              handleModalSubmit(feedback, "negative", reason);
              handleThumbsDownClick();
            }}
          />
        </div>
      )}
      </div>
    </div>
  );
};

export default ChatRow;