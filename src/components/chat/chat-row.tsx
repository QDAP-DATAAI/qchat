"use client";

import React, { FC, useState } from "react";
import { useChatContext } from "@/features/chat/chat-ui/chat-context"; // Import useChatContext
import { ChatRole } from "@/features/chat/chat-services/models";
import { CreateUserFeedbackChatId } from "@/features/chat/chat-services/chat-service";
import { cn } from "@/lib/utils";
import { CheckIcon, ClipboardIcon, ThumbsUp, ThumbsDown } from "lucide-react";
import Typography from "../typography";
import { Button } from "../ui/button";
import Modal from "../ui/modal";
import { Markdown } from "../markdown/markdown";

interface ChatRowProps {
  chatMessageId: string;
  name: string;
  profilePicture: string;
  message: string;
  type: ChatRole;
}

export const ChatRow: FC<ChatRowProps> = (props) => {
  const [isIconChecked, setIsIconChecked] = useState(false);
  const [thumbsUpClicked, setThumbsUpClicked] = useState(false);
  const [thumbsDownClicked, setThumbsDownClicked] = useState(false);
  const { isModalOpen, openModal, closeModal } = useChatContext();

  const toggleButton = (buttonId: string) => {
    switch (buttonId) {
      case 'ThumbsUp':
        setThumbsUpClicked(prevState => !prevState);
        setThumbsDownClicked(false);
        setIsIconChecked(false);
        CreateUserFeedbackChatId(props.chatMessageId, '', 'positive', '');
        break;
      case 'ThumbsDown':
        setThumbsDownClicked(prevState => !prevState);
        setThumbsUpClicked(false);
        setIsIconChecked(false);
        break;
      case 'CopyButton':
        setIsIconChecked(prevState => !prevState);
        setThumbsUpClicked(false);
        setThumbsDownClicked(false);
        break;
      default:
        break;
    }
  };

  const handleCopyButton = () => {
    toggleButton('CopyButton');
    const messageWithAttribution = props.message + "\n\nText generated by QChat";
    navigator.clipboard.writeText(messageWithAttribution);
  };

  async function handleModalSubmit(feedback: string, sentiment: string, reason: string): Promise<void> {
    // Implement modal submission logic here
  };

  const handleThumbsUpClick = () => {
    toggleButton('ThumbsUp');
  };

  const handleThumbsDownClick = () => {
    toggleButton('ThumbsDown');
    if (openModal) {
      openModal();
    }
  };

  const handleModalClose = () => {
    if (closeModal) {
      closeModal();
    }
  };

  return (
    <div className={cn("container mx-auto py-1 flex flex-col")}>
      <div className={cn("flex-col overflow-hidden p-1 gap-4")}>
        <div className="flex justify-between items-center w-full">
          <Typography variant="h4" className="capitalize flex-1 text-primary">
            {props.name}
          </Typography>
          <Modal
            chatThreadId={props.chatMessageId}
            open={isModalOpen || false}
            onClose={handleModalClose} 
            onSubmit={handleModalSubmit}
          />
        </div>
        <div className={cn("prose prose-slate dark:prose-invert break-words prose-p:leading-relaxed prose-pre:p-0 max-w-none bg-card")}>
          <Markdown content={props.message} />
        </div>
        {props.type === "assistant" && (
          <div className="container flex items-left w-full">
            <Button
              variant={"ghost"}
              size={"sm"}
              title="Copy text"
              onClick={handleCopyButton}
            >
              {isIconChecked ? (
                <CheckIcon size={14} />
              ) : (
                <ClipboardIcon size={14} />
              )}
            </Button>

            <Button
              variant={"ghost"}
              size={"sm"}
              title="Thumbs up"
              className="justify-right flex"
              onClick={handleThumbsUpClick}
            >
              {thumbsUpClicked ? (
                <CheckIcon size={14} />
              ) : (
                <ThumbsUp size={14} />
              )}
            </Button>
            <Button
              variant={"ghost"}
              size={"sm"}
              title="Thumbs down"
              className="justify-right flex"
              onClick={handleThumbsDownClick}
            >
              {thumbsDownClicked ? (
                <CheckIcon size={14} />
              ) : (
                <ThumbsDown size={14} />
              )}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatRow;
