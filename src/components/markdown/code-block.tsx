import hljs from "highlight.js"
import { ClipboardIcon } from "lucide-react"
import { FC, memo, useCallback } from "react"
import { Prism } from "react-syntax-highlighter"
import { atomDark } from "react-syntax-highlighter/dist/esm/styles/prism"

import { APP_NAME } from "@/app-global"

import { showError, showSuccess } from "@/features/globals/global-message-store"
import { Button } from "@/features/ui/button"

export const fence = {
  render: "CodeBlock",
  attributes: {
    language: {
      type: String,
    },
    value: {
      type: String,
    },
  },
}

interface Props {
  language: string
  children: string
}

const commonLanguages: Record<string, string> = {
  shell: "#",
  javascript: "//",
  html: "<!--",
  sql: "--",
  matlab: "%",
  fortran: "!",
  cobol: "*",
  vba: "'",
  ocaml: "(*",
  fsharp: "(*",
}

const specificLanguages: Record<string, string> = {
  python: "#",
  ruby: "#",
  perl: "#",
  r: "#",
  bash: "#",
  powershell: "#",
  tcl: "#",
  awk: "#",
  nim: "#",
  c: "//",
  java: "//",
  cpp: "//",
  csharp: "//",
  php: "//",
  go: "//",
  swift: "//",
  kotlin: "//",
  rust: "//",
  scala: "//",
  dart: "//",
  groovy: "//",
  pascal: "//",
  verilog: "//",
  nextflow: "//",
  lua: "--",
  haskell: "--",
  ada: "--",
  vhdl: "--",
  erlang: "--",
  prolog: "--",
  clojure: ";",
  lisp: ";",
  scheme: ";",
  assembly: ";",
}

const getAttribution = (language: string): string => {
  const prefix = specificLanguages[language] || commonLanguages[language] || "//"
  return `${prefix} ${language} code generated by ${APP_NAME}`
}

export const CodeBlock: FC<Props> = memo(({ language, children }): JSX.Element => {
  const handleCopy = useCallback(async (): Promise<void> => {
    try {
      const detectedLanguage = language || hljs.highlightAuto(children).language || "unknown"
      const attribution = getAttribution(detectedLanguage)

      await navigator.clipboard.writeText(`${children}\n${attribution}`)
      showSuccess({ description: "Code copied." })
    } catch (err) {
      showError(`Failed to copy code: ${err}`)
    }
  }, [language, children])

  return (
    <div className="group relative z-20 size-full">
      <Prism language={language} style={atomDark} PreTag="pre">
        {children}
      </Prism>
      <Button
        onClick={handleCopy}
        className="absolute right-2 top-2 hidden h-7 gap-1 px-2 text-base capitalize focus:bg-accent focus:text-link group-hover:flex"
        title="Copy code"
      >
        <ClipboardIcon size={14} />
        Copy {language}
      </Button>
    </div>
  )
})

CodeBlock.displayName = "CodeBlock"

export default CodeBlock
